/*
    SPDX-FileCopyrightText: 2025 Jerzy Kołosowski <jerzy@kolosowscy.pl>
    Based on Output.qml by Roman Gilg, Dan Vratil, and Kai Uwe Broulik

    SPDX-License-Identifier: GPL-2.0-or-later
*/
import QtQuick 2.15
import QtQuick.Layouts 1.15
import QtQuick.Controls 2.15 as QQC2
import org.kde.kirigami 2.20 as Kirigami

Item {
    id: presetOutput

    // KScreen::Output::Capability enum values (from kscreen/output.h)
    readonly property int capabilityHighDynamicRange: 8      // 1 << 3
    readonly property int capabilityExtendedDynamicRange: 2048 // 1 << 11

    property var outputData: null
    property var kcm: null
    property real scaleFactor: 1.0
    property real xOffset: 0
    property real yOffset: 0
    property var bounds: ({ minX: 0, minY: 0, maxX: 1920, maxY: 1080 })

    readonly property var pos: outputData?.pos || { x: 0, y: 0 }
    readonly property var mode: outputData?.mode || { width: 1920, height: 1080 }
    readonly property real scale: outputData?.scale || 1
    readonly property real monitorWidth: mode.width / scale
    readonly property real monitorHeight: mode.height / scale
    readonly property bool outputAvailable: !kcm || kcm.isOutputCurrentlyConnected(outputData?.id || "")

    visible: outputData?.enabled !== false
    x: ((pos.x || 0) - bounds.minX) * scaleFactor + xOffset
    y: ((pos.y || 0) - bounds.minY) * scaleFactor + yOffset
    width: monitorWidth * scaleFactor
    height: monitorHeight * scaleFactor
    opacity: outputAvailable ? 1.0 : 0.4

    Rectangle {
        id: outline
        anchors.centerIn: parent
        width: parent.width
        height: parent.height
        radius: 2
        color: outputAvailable ? Kirigami.Theme.backgroundColor : Kirigami.Theme.disabledTextColor
        border.color: outputAvailable ? Kirigami.Theme.textColor : Kirigami.Theme.disabledTextColor
        border.width: 2

        // Simple bottom bar as orientation indicator
        Rectangle {
            anchors {
                left: parent.left
                right: parent.right
                bottom: parent.bottom
                margins: 1
            }
            height: 2
            color: parent.border.color
        }

        // Priority number in top-right corner
        Rectangle {
            anchors {
                top: parent.top
                right: parent.right
                margins: 2
            }
            width: priorityText.width + 4
            height: priorityText.height + 2
            radius: 2
            color: Kirigami.Theme.highlightColor
            visible: parent.width > 30 && parent.height > 20

            Text {
                id: priorityText
                anchors.centerIn: parent
                text: presetOutput.outputData?.priority || "1"
                color: Kirigami.Theme.highlightedTextColor
                font.pixelSize: Math.max(6, Math.min(10, parent.parent.parent.height / 8))
                font.bold: true
            }
        }

        // Monitor info text - responsive to scaled size
        Column {
            anchors.centerIn: parent
            spacing: Math.max(1, parent.height / 15)

            Text {
                anchors.horizontalCenter: parent.horizontalCenter
                width: parent.parent.width - 4
                text: {
                    // Use displayName if available (generated by Utils::outputName())
                    var displayName = presetOutput.outputData?.displayName;
                    if (displayName) {
                        return displayName;
                    }

                    var name = "";
                    var vendor = presetOutput.outputData?.vendor || "";
                    var model = presetOutput.outputData?.model || "";

                    if (vendor) {
                        name = vendor + " ";
                    }
                    if (model) {
                        name += model + " ";
                    }

                    if (name.trim()) {
                        return name.trim();
                    }

                    return i18nc("@label default monitor name", "Monitor");
                }
                color: Kirigami.Theme.textColor
                font.pixelSize: Math.max(6, Math.min(12, parent.parent.height / 5))
                font.bold: false
                horizontalAlignment: Text.AlignHCenter
                wrapMode: Text.Wrap
                maximumLineCount: 2
                visible: parent.parent.height > 15
            }

            Text {
                anchors.horizontalCenter: parent.horizontalCenter
                text: {
                    // Use Utils::sizeToString() for consistent formatting
                    var res = presetOutput.kcm ?
                        presetOutput.kcm.formatResolution(mode.width || 1920, mode.height || 1080) :
                        (mode.width || 1920) + "×" + (mode.height || 1080);
                    var refresh = Math.round(mode.refreshRate || 60) + "Hz";
                    var extras = [];

                    // Get monitor capabilities
                    var capabilities = presetOutput.outputData?.capabilities || 0;

                    // Check for HDR - monitor must support it and have it enabled
                    var supportsHdr = (capabilities & capabilityHighDynamicRange) !== 0;
                    if (presetOutput.outputData?.hdr && supportsHdr) {
                        extras.push("<b>" + i18nc("@label HDR indicator", "HDR") + "</b>");
                    }

                    // Check for EDR policy - 1 means Always enabled, and monitor must support EDR
                    var edrPolicy = presetOutput.outputData?.edr_policy;
                    var supportsEdr = (capabilities & capabilityExtendedDynamicRange) !== 0;
                    if (edrPolicy === 1 && supportsEdr) {
                        extras.push("<b>" + i18nc("@label EDR indicator", "EDR") + "</b>");
                    }

                    var result = res + " " + refresh;
                    if (extras.length > 0) {
                        result += " " + extras.join(" ");
                    }

                    return result;
                }
                color: Kirigami.Theme.textColor
                font.pixelSize: Math.max(5, Math.min(10, parent.parent.height / 6))
                opacity: 0.8
                horizontalAlignment: Text.AlignHCenter
                elide: Text.ElideRight
                textFormat: Text.RichText
                visible: parent.parent.height > 20
            }

            Text {
                anchors.horizontalCenter: parent.horizontalCenter
                text: {
                    var scale = presetOutput.outputData?.scale || 1;
                    return i18nc("@info monitor scale factor", "Scale: %1%", Math.round(scale * 100));
                }
                color: Kirigami.Theme.textColor
                font.pixelSize: Math.max(5, Math.min(9, parent.parent.height / 7))
                opacity: 0.7
                horizontalAlignment: Text.AlignHCenter
                visible: parent.parent.height > 25
            }
        }
    }
}